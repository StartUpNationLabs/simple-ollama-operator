// Package ollama_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ollama_client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// PostApiCopyJSONBody defines parameters for PostApiCopy.
type PostApiCopyJSONBody struct {
	// Destination The destination model name (required)
	Destination *string `json:"destination,omitempty"`

	// Source The source model name (required)
	Source *string `json:"source,omitempty"`
}

// PostApiCreateJSONBody defines parameters for PostApiCreate.
type PostApiCreateJSONBody struct {
	// Modelfile The Modelfile contents
	Modelfile *string `json:"modelfile,omitempty"`

	// Name Name of the model to create (required)
	Name *string `json:"name,omitempty"`

	// Path Path to the Modelfile
	Path *string `json:"path,omitempty"`

	// Stream Stream the Modelfile
	Stream *bool `json:"stream,omitempty"`
}

// DeleteApiDeleteParams defines parameters for DeleteApiDelete.
type DeleteApiDeleteParams struct {
	// Model Name of the model to delete (required)
	Model string `form:"model" json:"model"`
}

// PostApiEmbeddingsJSONBody defines parameters for PostApiEmbeddings.
type PostApiEmbeddingsJSONBody struct {
	// Model The model name (required)
	Model *string `json:"model,omitempty"`

	// Options Additional model parameters
	Options *map[string]interface{} `json:"options,omitempty"`

	// Prompt Text to generate embeddings for
	Prompt *string `json:"prompt,omitempty"`
}

// PostApiGenerateJSONBody defines parameters for PostApiGenerate.
type PostApiGenerateJSONBody struct {
	// Model The model name (required)
	Model *string `json:"model,omitempty"`

	// Options Additional model parameters
	Options *map[string]interface{} `json:"options,omitempty"`

	// Prompt The prompt to generate a response for
	Prompt *string `json:"prompt,omitempty"`

	// System System prompt to override the model's definition
	System *string `json:"system,omitempty"`

	// Template The full prompt or prompt template to override the model's definition
	Template *string `json:"template,omitempty"`
}

// PostApiPullJSONBody defines parameters for PostApiPull.
type PostApiPullJSONBody struct {
	// Insecure Allow insecure connections to the library
	Insecure *bool `json:"insecure,omitempty"`

	// Name Name of the model to pull (required)
	Name *string `json:"name,omitempty"`

	// Stream Stream the download
	Stream *bool `json:"stream,omitempty"`
}

// PostApiPushJSONBody defines parameters for PostApiPush.
type PostApiPushJSONBody struct {
	// Insecure Allow insecure connections to the library
	Insecure *bool `json:"insecure,omitempty"`

	// Name Name of the model to push (required)
	Name *string `json:"name,omitempty"`
}

// PostApiShowJSONBody defines parameters for PostApiShow.
type PostApiShowJSONBody struct {
	// Name Name of the model to show
	Name *string `json:"name,omitempty"`
}

// PostApiCopyJSONRequestBody defines body for PostApiCopy for application/json ContentType.
type PostApiCopyJSONRequestBody PostApiCopyJSONBody

// PostApiCreateJSONRequestBody defines body for PostApiCreate for application/json ContentType.
type PostApiCreateJSONRequestBody PostApiCreateJSONBody

// PostApiEmbeddingsJSONRequestBody defines body for PostApiEmbeddings for application/json ContentType.
type PostApiEmbeddingsJSONRequestBody PostApiEmbeddingsJSONBody

// PostApiGenerateJSONRequestBody defines body for PostApiGenerate for application/json ContentType.
type PostApiGenerateJSONRequestBody PostApiGenerateJSONBody

// PostApiPullJSONRequestBody defines body for PostApiPull for application/json ContentType.
type PostApiPullJSONRequestBody PostApiPullJSONBody

// PostApiPushJSONRequestBody defines body for PostApiPush for application/json ContentType.
type PostApiPushJSONRequestBody PostApiPushJSONBody

// PostApiShowJSONRequestBody defines body for PostApiShow for application/json ContentType.
type PostApiShowJSONRequestBody PostApiShowJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiCopyWithBody request with any body
	PostApiCopyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiCopy(ctx context.Context, body PostApiCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiCreateWithBody request with any body
	PostApiCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiCreate(ctx context.Context, body PostApiCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDelete request
	DeleteApiDelete(ctx context.Context, params *DeleteApiDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiEmbeddingsWithBody request with any body
	PostApiEmbeddingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiEmbeddings(ctx context.Context, body PostApiEmbeddingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiGenerateWithBody request with any body
	PostApiGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiGenerate(ctx context.Context, body PostApiGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPullWithBody request with any body
	PostApiPullWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPull(ctx context.Context, body PostApiPullJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPushWithBody request with any body
	PostApiPushWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPush(ctx context.Context, body PostApiPushJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiShowWithBody request with any body
	PostApiShowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiShow(ctx context.Context, body PostApiShowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTags request
	GetApiTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiCopyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCopyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCopy(ctx context.Context, body PostApiCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCopyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiCreate(ctx context.Context, body PostApiCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDelete(ctx context.Context, params *DeleteApiDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiEmbeddingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiEmbeddingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiEmbeddings(ctx context.Context, body PostApiEmbeddingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiEmbeddingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGenerateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGenerate(ctx context.Context, body PostApiGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGenerateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPullWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPullRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPull(ctx context.Context, body PostApiPullJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPullRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPushWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPushRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPush(ctx context.Context, body PostApiPushJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPushRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiShowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiShowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiShow(ctx context.Context, body PostApiShowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiShowRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiCopyRequest calls the generic PostApiCopy builder with application/json body
func NewPostApiCopyRequest(server string, body PostApiCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiCopyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiCopyRequestWithBody generates requests for PostApiCopy with any type of body
func NewPostApiCopyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/copy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiCreateRequest calls the generic PostApiCreate builder with application/json body
func NewPostApiCreateRequest(server string, body PostApiCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiCreateRequestWithBody generates requests for PostApiCreate with any type of body
func NewPostApiCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiDeleteRequest generates requests for DeleteApiDelete
func NewDeleteApiDeleteRequest(server string, params *DeleteApiDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model", runtime.ParamLocationQuery, params.Model); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiEmbeddingsRequest calls the generic PostApiEmbeddings builder with application/json body
func NewPostApiEmbeddingsRequest(server string, body PostApiEmbeddingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiEmbeddingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiEmbeddingsRequestWithBody generates requests for PostApiEmbeddings with any type of body
func NewPostApiEmbeddingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/embeddings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiGenerateRequest calls the generic PostApiGenerate builder with application/json body
func NewPostApiGenerateRequest(server string, body PostApiGenerateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiGenerateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiGenerateRequestWithBody generates requests for PostApiGenerate with any type of body
func NewPostApiGenerateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiPullRequest calls the generic PostApiPull builder with application/json body
func NewPostApiPullRequest(server string, body PostApiPullJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPullRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiPullRequestWithBody generates requests for PostApiPull with any type of body
func NewPostApiPullRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pull")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiPushRequest calls the generic PostApiPush builder with application/json body
func NewPostApiPushRequest(server string, body PostApiPushJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPushRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiPushRequestWithBody generates requests for PostApiPush with any type of body
func NewPostApiPushRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/push")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiShowRequest calls the generic PostApiShow builder with application/json body
func NewPostApiShowRequest(server string, body PostApiShowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiShowRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiShowRequestWithBody generates requests for PostApiShow with any type of body
func NewPostApiShowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/show")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiTagsRequest generates requests for GetApiTags
func NewGetApiTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiCopyWithBodyWithResponse request with any body
	PostApiCopyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCopyResponse, error)

	PostApiCopyWithResponse(ctx context.Context, body PostApiCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCopyResponse, error)

	// PostApiCreateWithBodyWithResponse request with any body
	PostApiCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCreateResponse, error)

	PostApiCreateWithResponse(ctx context.Context, body PostApiCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCreateResponse, error)

	// DeleteApiDeleteWithResponse request
	DeleteApiDeleteWithResponse(ctx context.Context, params *DeleteApiDeleteParams, reqEditors ...RequestEditorFn) (*DeleteApiDeleteResponse, error)

	// PostApiEmbeddingsWithBodyWithResponse request with any body
	PostApiEmbeddingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiEmbeddingsResponse, error)

	PostApiEmbeddingsWithResponse(ctx context.Context, body PostApiEmbeddingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiEmbeddingsResponse, error)

	// PostApiGenerateWithBodyWithResponse request with any body
	PostApiGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiGenerateResponse, error)

	PostApiGenerateWithResponse(ctx context.Context, body PostApiGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiGenerateResponse, error)

	// PostApiPullWithBodyWithResponse request with any body
	PostApiPullWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPullResponse, error)

	PostApiPullWithResponse(ctx context.Context, body PostApiPullJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPullResponse, error)

	// PostApiPushWithBodyWithResponse request with any body
	PostApiPushWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPushResponse, error)

	PostApiPushWithResponse(ctx context.Context, body PostApiPushJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPushResponse, error)

	// PostApiShowWithBodyWithResponse request with any body
	PostApiShowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiShowResponse, error)

	PostApiShowWithResponse(ctx context.Context, body PostApiShowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiShowResponse, error)

	// GetApiTagsWithResponse request
	GetApiTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTagsResponse, error)
}

type PostApiCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiEmbeddingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Embeddings *[]float32 `json:"embeddings,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiEmbeddingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiEmbeddingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Context            *[]int     `json:"context,omitempty"`
		CreatedAt          *time.Time `json:"created_at,omitempty"`
		Done               *bool      `json:"done,omitempty"`
		EvalCount          *int       `json:"eval_count,omitempty"`
		EvalDuration       *int       `json:"eval_duration,omitempty"`
		LoadDuration       *int       `json:"load_duration,omitempty"`
		Model              *string    `json:"model,omitempty"`
		PromptEvalCount    *int       `json:"prompt_eval_count,omitempty"`
		PromptEvalDuration *int       `json:"prompt_eval_duration,omitempty"`
		Response           *string    `json:"response,omitempty"`
		SampleCount        *int       `json:"sample_count,omitempty"`
		SampleDuration     *int       `json:"sample_duration,omitempty"`
		TotalDuration      *int       `json:"total_duration,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPullResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Digest *string `json:"digest,omitempty"`
		Status *string `json:"status,omitempty"`
		Total  *int    `json:"total,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiPullResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPullResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPushResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiPushResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPushResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		License    *string `json:"license,omitempty"`
		Modelfile  *string `json:"modelfile,omitempty"`
		Parameters *string `json:"parameters,omitempty"`
		Template   *string `json:"template,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Models *[]struct {
			ModifiedAt *time.Time `json:"modified_at,omitempty"`
			Name       *string    `json:"name,omitempty"`
			Size       *int       `json:"size,omitempty"`
		} `json:"models,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiCopyWithBodyWithResponse request with arbitrary body returning *PostApiCopyResponse
func (c *ClientWithResponses) PostApiCopyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCopyResponse, error) {
	rsp, err := c.PostApiCopyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCopyResponse(rsp)
}

func (c *ClientWithResponses) PostApiCopyWithResponse(ctx context.Context, body PostApiCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCopyResponse, error) {
	rsp, err := c.PostApiCopy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCopyResponse(rsp)
}

// PostApiCreateWithBodyWithResponse request with arbitrary body returning *PostApiCreateResponse
func (c *ClientWithResponses) PostApiCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiCreateResponse, error) {
	rsp, err := c.PostApiCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCreateResponse(rsp)
}

func (c *ClientWithResponses) PostApiCreateWithResponse(ctx context.Context, body PostApiCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiCreateResponse, error) {
	rsp, err := c.PostApiCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiCreateResponse(rsp)
}

// DeleteApiDeleteWithResponse request returning *DeleteApiDeleteResponse
func (c *ClientWithResponses) DeleteApiDeleteWithResponse(ctx context.Context, params *DeleteApiDeleteParams, reqEditors ...RequestEditorFn) (*DeleteApiDeleteResponse, error) {
	rsp, err := c.DeleteApiDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDeleteResponse(rsp)
}

// PostApiEmbeddingsWithBodyWithResponse request with arbitrary body returning *PostApiEmbeddingsResponse
func (c *ClientWithResponses) PostApiEmbeddingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiEmbeddingsResponse, error) {
	rsp, err := c.PostApiEmbeddingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiEmbeddingsResponse(rsp)
}

func (c *ClientWithResponses) PostApiEmbeddingsWithResponse(ctx context.Context, body PostApiEmbeddingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiEmbeddingsResponse, error) {
	rsp, err := c.PostApiEmbeddings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiEmbeddingsResponse(rsp)
}

// PostApiGenerateWithBodyWithResponse request with arbitrary body returning *PostApiGenerateResponse
func (c *ClientWithResponses) PostApiGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiGenerateResponse, error) {
	rsp, err := c.PostApiGenerateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGenerateResponse(rsp)
}

func (c *ClientWithResponses) PostApiGenerateWithResponse(ctx context.Context, body PostApiGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiGenerateResponse, error) {
	rsp, err := c.PostApiGenerate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGenerateResponse(rsp)
}

// PostApiPullWithBodyWithResponse request with arbitrary body returning *PostApiPullResponse
func (c *ClientWithResponses) PostApiPullWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPullResponse, error) {
	rsp, err := c.PostApiPullWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPullResponse(rsp)
}

func (c *ClientWithResponses) PostApiPullWithResponse(ctx context.Context, body PostApiPullJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPullResponse, error) {
	rsp, err := c.PostApiPull(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPullResponse(rsp)
}

// PostApiPushWithBodyWithResponse request with arbitrary body returning *PostApiPushResponse
func (c *ClientWithResponses) PostApiPushWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPushResponse, error) {
	rsp, err := c.PostApiPushWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPushResponse(rsp)
}

func (c *ClientWithResponses) PostApiPushWithResponse(ctx context.Context, body PostApiPushJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPushResponse, error) {
	rsp, err := c.PostApiPush(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPushResponse(rsp)
}

// PostApiShowWithBodyWithResponse request with arbitrary body returning *PostApiShowResponse
func (c *ClientWithResponses) PostApiShowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiShowResponse, error) {
	rsp, err := c.PostApiShowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiShowResponse(rsp)
}

func (c *ClientWithResponses) PostApiShowWithResponse(ctx context.Context, body PostApiShowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiShowResponse, error) {
	rsp, err := c.PostApiShow(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiShowResponse(rsp)
}

// GetApiTagsWithResponse request returning *GetApiTagsResponse
func (c *ClientWithResponses) GetApiTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTagsResponse, error) {
	rsp, err := c.GetApiTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTagsResponse(rsp)
}

// ParsePostApiCopyResponse parses an HTTP response from a PostApiCopyWithResponse call
func ParsePostApiCopyResponse(rsp *http.Response) (*PostApiCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiCreateResponse parses an HTTP response from a PostApiCreateWithResponse call
func ParsePostApiCreateResponse(rsp *http.Response) (*PostApiCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiDeleteResponse parses an HTTP response from a DeleteApiDeleteWithResponse call
func ParseDeleteApiDeleteResponse(rsp *http.Response) (*DeleteApiDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiEmbeddingsResponse parses an HTTP response from a PostApiEmbeddingsWithResponse call
func ParsePostApiEmbeddingsResponse(rsp *http.Response) (*PostApiEmbeddingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiEmbeddingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Embeddings *[]float32 `json:"embeddings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiGenerateResponse parses an HTTP response from a PostApiGenerateWithResponse call
func ParsePostApiGenerateResponse(rsp *http.Response) (*PostApiGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Context            *[]int     `json:"context,omitempty"`
			CreatedAt          *time.Time `json:"created_at,omitempty"`
			Done               *bool      `json:"done,omitempty"`
			EvalCount          *int       `json:"eval_count,omitempty"`
			EvalDuration       *int       `json:"eval_duration,omitempty"`
			LoadDuration       *int       `json:"load_duration,omitempty"`
			Model              *string    `json:"model,omitempty"`
			PromptEvalCount    *int       `json:"prompt_eval_count,omitempty"`
			PromptEvalDuration *int       `json:"prompt_eval_duration,omitempty"`
			Response           *string    `json:"response,omitempty"`
			SampleCount        *int       `json:"sample_count,omitempty"`
			SampleDuration     *int       `json:"sample_duration,omitempty"`
			TotalDuration      *int       `json:"total_duration,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiPullResponse parses an HTTP response from a PostApiPullWithResponse call
func ParsePostApiPullResponse(rsp *http.Response) (*PostApiPullResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPullResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Digest *string `json:"digest,omitempty"`
			Status *string `json:"status,omitempty"`
			Total  *int    `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiPushResponse parses an HTTP response from a PostApiPushWithResponse call
func ParsePostApiPushResponse(rsp *http.Response) (*PostApiPushResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPushResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiShowResponse parses an HTTP response from a PostApiShowWithResponse call
func ParsePostApiShowResponse(rsp *http.Response) (*PostApiShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			License    *string `json:"license,omitempty"`
			Modelfile  *string `json:"modelfile,omitempty"`
			Parameters *string `json:"parameters,omitempty"`
			Template   *string `json:"template,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiTagsResponse parses an HTTP response from a GetApiTagsWithResponse call
func ParseGetApiTagsResponse(rsp *http.Response) (*GetApiTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Models *[]struct {
				ModifiedAt *time.Time `json:"modified_at,omitempty"`
				Name       *string    `json:"name,omitempty"`
				Size       *int       `json:"size,omitempty"`
			} `json:"models,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yZX2/cNgzAv4qgl22Al2Z/nu4tbYciQ9MFS/a0DgHPos8qZMkV6UtuQb77IMn2+c6+",
	"P0mDrWj35sgUySN/okjnXmpbODm7lwop97pm7aycybPLc1E4L7Rl9JCztgtxq7kUzhioQFROoSGZSdZs",
	"UM5ku352eS4zuURPSc8PJ6cnp/Ihk65GC7WWM/lTXMpkDVxSsPwCav0id/Uq/FE74rE7r1y9Eq3VE/HK",
	"IzBSt5AcA+u4RC8sVCgK7yoBVuCdpuh7FJTRDQ9B6bmSM3npiM9qHbTLTHr82CDxS6eiJ7mzjDY6A3Vt",
	"dB73vfhAwaN7SXmJFUSXfdDKGql1nLWF5Pj277guUQwEWv+jy98G89qj+i5EdVWHoBJ7bRchfOQan+O0",
	"wvTuWF0P/Yqbf8Cc5UNY6jbIGfsG4wLVzlL6TT+enn5CRIiBm/h0lCtbIApij1AJV4hfr357J5IopaQn",
	"1eK9pCbPkei9jFqpqSrwqzU4FzH94VWCLQK0B7f4vucr0ZSUFNrgTo6S2uciqertTaa9d0e0+mkKnMDD",
	"eP+7QIkrBJcdN+xEisoBEMOpHeu7BC6DCh76NclxTOZYwVVK8o79c+cMgv3q4O0w3MJXoUFus7p+Ghp+",
	"Hdd7gMEqoZmEAoYRvEn2rNbpIVZmDxUyepKzP49CJ/mxiY4O0h8b9KG2JgxlV4Y3M5YNor8d5b++mGz2",
	"OdnKJlZzVErbBe0uSG/QhpShWAt3VWnvzfbLWvezVqXpinT0bebiLppoO5TS4RFMq2yA4ihDWfCsqifC",
	"dY13HLBcTIXN+c/hUtzMumashljappqjl2u3wHtYHYfpIOebAPYQbUlECrtQHcEgiC4OsUUEsdBLtCIl",
	"o23Gwl9LrVB1Pdt1qUno0LOlQxSaMrSqdtryyS58O5NfF7wldrEcIrwZ9cm7dUWMU3drXB/odEv0Xitc",
	"1/BvSCgstI3+T+lmrGoDvKMVKRpjOv3O95baPU8y+e+fyLjtjqeOY5iCFlPnMZOpaVI3EDcWzlfhSSpg",
	"/J51NdkEKWdxoL3vbjKJSzA3uWuS92Pr8b1qfD9ejEWMA3VApD8F4+4uZu7mkBtDsf2muvxMWiOoaoP7",
	"DLUS+22w4wN+fMrtHiz8nMDa3PASlPg9VaVdhRZE7sIPiDv6Uls3xuwus6/drQ053Jw+wrFpR2yj5x5i",
	"UzVZMy+D9ueql9oS5o2fOPZnxrhb0b0PI4jFPBbGbg5Y+znm/BFTSYjWoeH48FCh2qh+FjOF0gsknj4S",
	"uxrUFvOn0t1T1RrYBDYwM25M64bK3Zz+UW9Qyq5/PAgolV8WoFT+/8VlwBKVY5aodLe7Wboq3a1QyKAN",
	"CZi7hnuYtM1No/pPeIU2mPWdRTZosTJhdI6WMIvjLg2bnl0oBrvPhuIjkKFk9z/npI3YZLnZ+Po08Rlo",
	"/Yngfn+7+AQEL9rUp3aquzzXjEVektD5llCkjSGNVQucgO2tJm6/XwsugQV4FLAEbWBuUBiXgzHj6vUG",
	"AzHX0I7Sz5aD9kv6sOscCehCP7LF7GAcXzD6bzzuEnnK7Blj64oUxO6fBJu5iyJv4/uL7v3Dwz8BAAD/",
	"/3TlKXmIGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
